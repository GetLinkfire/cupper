<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Patterns on Linkfire Frontend Guidelines</title>
    <link>https://getlinkfire.github.io/frontend/patterns/</link>
    <description>Recent content in Patterns on Linkfire Frontend Guidelines</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://getlinkfire.github.io/frontend/patterns/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Components</title>
      <link>https://getlinkfire.github.io/frontend/patterns/ember/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://getlinkfire.github.io/frontend/patterns/ember/components/</guid>
      <description>The following are rules and guidelines for developing components in Ember.js at Linkfire.
Named arguments Always use named arguments when passing values to a component.
Example: You have a component that displays cool employees. It will display the employee name and their catchphrase like this:
{{cool-employees name=“Theo” catchphrase=&amp;quot;Huh, oh, wait, wat&amp;quot;}}
Now, in the component you can access the named arguments like this:
Meet {{@name}}, his catchphrase is {{@catchphrase}}</description>
    </item>
    
    <item>
      <title>Linting</title>
      <link>https://getlinkfire.github.io/frontend/patterns/linting/linting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://getlinkfire.github.io/frontend/patterns/linting/linting/</guid>
      <description>General JavaScript Linting eslint is used for JavaScript linting: https://eslint.org/
Required plugins are as follows: eslint-plugin-unicorn eslint-plugin-const-case
.eslintrc.js
module.exports = { plugins: [ &#39;const-case&#39;, &#39;unicorn&#39; ], extends: [ &#39;eslint:recommended&#39;, &#39;plugin:unicorn/recommended&#39; ], rules: { &#39;operator-linebreak&#39;: [&#39;error&#39;, &#39;after&#39;], &#39;no-useless-escape&#39;: &#39;off&#39;, &#39;const-case/uppercase&#39;: &#39;error&#39;, &#39;capitalized-comments&#39;: [&#39;error&#39;, &#39;always&#39;], &#39;no-inline-comments&#39;: &#39;error&#39;, &#39;no-lonely-if&#39;: &#39;error&#39;, &#39;no-mixed-operators&#39;: &#39;error&#39;, &#39;no-mixed-spaces-and-tabs&#39;: &#39;error&#39;, &#39;no-tabs&#39;: &#39;error&#39;, &#39;no-multiple-empty-lines&#39;: [&#39;error&#39;, { max: 1 }], &#39;no-nested-ternary&#39;: &#39;error&#39;, &#39;no-negated-condition&#39;: &#39;error&#39;, &#39;no-unneeded-ternary&#39;: &#39;error&#39;, &#39;no-whitespace-before-property&#39;: &#39;error&#39;, &#39;nonblock-statement-body-position&#39;: [&#39;error&#39;, &#39;beside&#39;], &#39;key-spacing&#39;: [&#39;error&#39;, { &#39;mode&#39;: &#39;strict&#39; }], &#39;implicit-arrow-linebreak&#39;: [&#39;error&#39;, &#39;beside&#39;], &#39;newline-per-chained-call&#39;: [&#39;error&#39;, { &#39;ignoreChainWithDepth&#39;: 2 }], &#39;padded-blocks&#39;: [&#39;error&#39;, &#39;never&#39;], &#39;lines-between-class-members&#39;: [ &#39;error&#39;, &#39;always&#39;, { &#39;exceptAfterSingleLine&#39;: true } ], &#39;padding-line-between-statements&#39;: [ &#39;error&#39;, { &#39;blankLine&#39;: &#39;always&#39;, &#39;prev&#39;: &#39;multiline-block-like&#39;, &#39;next&#39;: &#39;*&#39; }, { &#39;blankLine&#39;: &#39;always&#39;, &#39;prev&#39;: &#39;multiline-expression&#39;, &#39;next&#39;: &#39;*&#39; }, { &#39;blankLine&#39;: &#39;always&#39;, &#39;prev&#39;: &#39;let&#39;, &#39;next&#39;: &#39;*&#39; }, { &#39;blankLine&#39;: &#39;always&#39;, &#39;prev&#39;: &#39;*&#39;, &#39;next&#39;: &#39;let&#39; }, { &#39;blankLine&#39;: &#39;never&#39;, &#39;prev&#39;: &#39;let&#39;, &#39;next&#39;: &#39;let&#39; }, { &#39;blankLine&#39;: &#39;always&#39;, &#39;prev&#39;: &#39;*&#39;, &#39;next&#39;: &#39;if&#39; }, { &#39;blankLine&#39;: &#39;always&#39;, &#39;prev&#39;: &#39;*&#39;, &#39;next&#39;: &#39;for&#39; }, { &#39;blankLine&#39;: &#39;always&#39;, &#39;prev&#39;: &#39;*&#39;, &#39;next&#39;: &#39;while&#39; }, { &#39;blankLine&#39;: &#39;always&#39;, &#39;prev&#39;: &#39;*&#39;, &#39;next&#39;: &#39;do&#39; }, { &#39;blankLine&#39;: &#39;always&#39;, &#39;prev&#39;: &#39;*&#39;, &#39;next&#39;: &#39;switch&#39; }, { &#39;blankLine&#39;: &#39;always&#39;, &#39;prev&#39;: &#39;*&#39;, &#39;next&#39;: &#39;try&#39; }, { &#39;blankLine&#39;: &#39;always&#39;, &#39;prev&#39;: &#39;*&#39;, &#39;next&#39;: &#39;throw&#39; }, { &#39;blankLine&#39;: &#39;always&#39;, &#39;prev&#39;: &#39;*&#39;, &#39;next&#39;: &#39;return&#39; } ], &#39;array-bracket-newline&#39;: [ &#39;error&#39;, &#39;consistent&#39; ], &#39;object-curly-newline&#39;: [ &#39;error&#39;, { &#39;ObjectExpression&#39;: { &#39;minProperties&#39;: 3, &#39;consistent&#39;: true }, &#39;ObjectPattern&#39;: { &#39;minProperties&#39;: 3 }, &#39;ImportDeclaration&#39;: { &#39;minProperties&#39;: 3 }, &#39;ExportDeclaration&#39;: { &#39;minProperties&#39;: 3 } } ] } };  Ember Linting Required plugins are as follows:</description>
    </item>
    
    <item>
      <title>The Frontend Architecture</title>
      <link>https://getlinkfire.github.io/frontend/patterns/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://getlinkfire.github.io/frontend/patterns/architecture/</guid>
      <description>Coming soon.</description>
    </item>
    
  </channel>
</rss>